题目 1：基于 TCP 的学生信息传输
描述：
设计一个 Rust 程序，使用 TCP 协议传输学生信息。学生信息包括姓名（name）和学号（id）。（要求）程序分为服务器和客户端：
1、使用 serde 和 serde_json 将 Student 结构体序列化为 JSON 格式。
2、服务器监听 TCP 连接，接收单个客户端的 JSON 数据，反序列化为 Student 结构体并打印。
3、客户端连接到服务器，发送 Student JSON 数据。
4、包含基本的错误处理，处理网络连接和序列化/反序列化错误。
5、使用 Rust 标准库 std::net::{TcpListener, TcpStream} 实现。】

输入/输出：
    客户端：发送 JSON 格式的 Student 数据（例如 {"name":"Bob","id":"S67890"}）。
    服务器：接收数据，打印反序列化后的 Student 信息（如 Received: Student { name: "Bob", id: "S67890" }）。

----------------------------------------------------------------------------------------------------------------------

题目 2：基于 TCP 的学生信息传输（pro）
描述：
1、设计一个 Rust 程序，使用 TCP 协议实现学生信息的广播功能。学生信息包括姓名（name）、学号（id）和年龄（age）。程序分为服务器和客户端：
2、使用 serde 和 serde_json 将 Student 结构体序列化为 JSON 格式。
3、服务器监听 TCP 连接，支持多个客户端同时连接。当接收到任一客户端发送的 Student JSON 数据时，反序列化并打印，然后将该数据广播给所有其他已连接的客户端。
4、客户端连接到服务器，发送 Student JSON 数据，并持续接收服务器广播的其他客户端的 Student 数据，打印接收到的信息。
5、包含健壮的错误处理，处理网络断开、序列化/反序列化错误和无效数据。服务器需在客户端断开时清理无效连接。
6、使用 Rust 标准库 std::net::{TcpListener, TcpStream} 实现，使用线程支持多客户端并发。

输入/输出：
客户端：
    发送 JSON 格式的 Student 数据（例如 {"name":"Bob","id":"S67890","age":22}）。
    接收并打印服务器广播的 Student 数据（例如 Received broadcast: Student { name: "Alice", id: "S12345", age: 20 }）。
服务器：
    接收客户端的 JSON 数据，反序列化为 Student，打印（如 Received: Student { name: "Bob", id: "S67890", age: 22 }）。
    将收到的 Student 数据广播给其他客户端（如 Broadcasting: Student { name: "Bob", id: "S67890", age: 22 }）。

----------------------------------------------------------------------------------------------------------------------
题目 3