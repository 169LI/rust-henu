目标：
围绕一个 “任务管理工具” （Workspace结构组织-模块化结构） 的项目，包含多个 crate 和模块，展示如何组织代码、跨包调用、定义结构体及方法，以及使用 pub 控制可见性。

要求：
(三个必要的模块crate的功能、注释规范性要求、项目介绍文档)
1、task_model：一个库 crate，定义任务相关的结构体、方法和核心逻辑（如创建任务、更新状态）。
2、utils：一个库 crate，提供通用工具函数（如格式化日期、生成唯一 ID）。
3、task_cli：一个二进制 crate，作为命令行界面，调用 task_model 和 utils 的功能，允许用户添加任务、查看任务列表等。
4、examples 和 tests 模块是干什莫的？尝试把这俩模块和自己写的代码结合起来，补充这俩模块的内容。
4、可以参考rust圣经，学会如何写注释，注释要有规范性
4、自己可以对功能实现上可做适当简化
5、README.md 介绍你的项目并说明如何构建、运行和测试项目。

具体模块以及功能实现:

- task_model crate：
    定义模块 model，包含：
        结构体 Task（字段：id: String、title: String、status: TaskStatus）。
        枚举 TaskStatus（变体：Todo、InProgress、Done）。
        为 Task 实现方法：
            new(id: String, title: String) -> Task：创建新任务，状态默认为 Todo。
            update_status(&mut self, status: TaskStatus)：更新任务状态。
            get_summary(&self) -> String：返回任务摘要（格式：[id] title (status)）。
        方法 get_summary 仅对 crate 内部可见（使用 pub(crate)）。
    定义模块 manager，包含：
        结构体 TaskManager（字段：tasks: Vec<Task>）。
        为 TaskManager 实现方法：
            add_task(&mut self, task: Task)：添加任务。
            list_tasks(&self) -> Vec<String>：返回所有任务的摘要列表。
- utils crate：
    定义模块 id_gen，包含：
        函数 generate_id() -> String：生成 4 位随机字符串 ID（为简化，可返回固定值如 "1234"）。
    定义模块 date，包含：
        函数 format_date() -> String：返回当前日期（为简化，可返回固定值如 "2025-05-15"）。
        函数 format_date 仅对 crate 内部可见（使用 pub(crate)）。
- task_cli crate：
    实现命令行程序，提供交互菜单：
        选项 1：添加新任务（调用 utils::id_gen::generate_id 生成 ID，创建 Task 并添加到 TaskManager）。
        选项 2：列出所有任务（调用 TaskManager::list_tasks）。
        选项 3：退出程序。